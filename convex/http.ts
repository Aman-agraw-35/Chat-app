import { httpRouter } from "convex/server";
import { httpAction } from "./_generated/server";
import { WebhookEvent } from "@clerk/nextjs/server";
import { Webhook} from "svix";
import { internal } from "./_generated/api";

const validatePayload = async (req: Request ):
Promise<WebhookEvent | undefined > => {
    const payload = await req.text();


    const svixHeaders = {
        "svix-id" : req.headers.get("svix-id")!,
        "svix-timestamp" : req.headers.get("svix-timestamp")!,
        "svix-signature" : req.headers.get("svix-signature")!,
    };

    const webhook = new Webhook(process.env.CLERK_WEBHOOK_SECRET || "");
      
    try{
        const event = webhook.verify(payload, svixHeaders) as WebhookEvent ;

        return event 
    } catch (error){
        console.error("Clerk webhook request could not be verified")
        return 
    }
};

const handleCLerkWebhook = httpAction (async (ctx , req) =>{

    const event = await validatePayload(req);

    if(!event){
        return new Response("Could not validate Clerk payload",{
        status : 400,
        })
    }

    switch(event.type){
        case  "user.created":
            const user = await ctx.runQuery(internal.
                user.get,
                 { clerkId : event.data.id})

                 if (user){
                    console.log(`Updating user ${event.data.id} with: ${event.data}`);
                    
                 }
        case "user.updated":
            {
            console.log("Creating/Updating User:", event.data.id);

            await ctx.runMutation(internal.user.create, {
            username: `${event.data.first_name} ${event.data.last_name}`,
            imageUrl: `${event.data.image_url}`,
            clerkId: event.data.id,
            email: event.data.email_addresses[0].email_address,

            });
            break;
            
        }
        default: {
            console.log("Clerk webhoook event not supported" , event.type);
            
    }
}
 return new Response(null , {status: 200 })
});

const http = httpRouter();

http.route({
    path: "/clerk-user-webhook",
    method: "POST",
    handler: handleCLerkWebhook
});

export default http;


// ----------------------------------------------------------------
/**Import Statements:
Import necessary modules and libraries:
convex/server: Used to define HTTP routes and actions.
./_generated/server: Custom server actions generated by Convex.
@clerk/nextjs/server: Provides type definitions for Clerk webhook events.
svix: Used for webhook verification.
./_generated/api: Internal API methods generated by Convex.
Payload Validation

validatePayload Function:
Purpose: Validates the incoming webhook payload from Clerk.
Steps:
Reads the payload from the request.
Extracts the Svix headers needed for verification.
Uses the Svix Webhook class to verify the payload using a secret stored in environment variables.
Returns the verified event if successful, or logs an error and returns undefined if verification fails.
Code:
javascript
Copy code
const validatePayload = async (req: Request): Promise<WebhookEvent | undefined> => {
    const payload = await req.text();

    const svixHeaders = {
        "svix-id": req.headers.get("svix-id")!,
        "svix-timestamp": req.headers.get("svix-timestamp")!,
        "svix-signature": req.headers.get("svix-signature")!,
    };

    const webhook = new Webhook(process.env.CLERK_WEBHOOK_SECRET || "");

    try {
        const event = webhook.verify(payload, svixHeaders) as WebhookEvent;
        return event;
    } catch (error) {
        console.error("Clerk webhook request could not be verified");
        return;
    }
};
Handling the Webhook

handleCLerkWebhook Function:
Purpose: Handles incoming webhook events from Clerk and performs necessary actions based on the event type.
Steps:
Calls validatePayload to verify the request.
If the payload is invalid, responds with a 400 status.
If valid, processes the event based on its type (user.created or user.updated):
user.created: Checks if the user already exists in the database, logs an update message if found.
user.updated: Logs a creation/update message and creates/updates the user in the database with provided data.
For unsupported event types, logs a message.
Responds with a 200 status for all valid events.
Code:
javascript
Copy code
const handleCLerkWebhook = httpAction(async (ctx, req) => {
    const event = await validatePayload(req);

    if (!event) {
        return new Response("Could not validate Clerk payload", {
            status: 400,
        });
    }

    switch (event.type) {
        case "user.created":
            const user = await ctx.runQuery(internal.user.get, { clerkId: event.data.id });
            if (user) {
                console.log(`Updating user ${event.data.id} with: ${event.data}`);
            }
        case "user.updated":
            {
                console.log("Creating/Updating User:", event.data.id);
                await ctx.runMutation(internal.user.create, {
                    username: `${event.data.first_name} ${event.data.last_name}`,
                    imageUrl: `${event.data.image_url}`,
                    clerkId: event.data.id,
                    email: event.data.email_addresses[0].email_address,
                });
                break;
            }
        default: {
            console.log("Clerk webhook event not supported", event.type);
        }
    }
    return new Response(null, { status: 200 });
});
Setting Up the HTTP Route

Defining the HTTP Route:
Purpose: Sets up an HTTP POST route to handle Clerk webhook events.
Steps:
Creates an HTTP router instance.
Defines a route at /clerk-user-webhook that accepts POST requests and handles them using handleCLerkWebhook.
Exports the configured router as the default export.
Code:
javascript
Copy code
const http = httpRouter();

http.route({
    path: "/clerk-user-webhook",
    method: "POST",
    handler: handleCLerkWebhook
});

export default http;
Summary

validatePayload: Validates incoming webhook payloads from Clerk using Svix.
handleCLerkWebhook: Processes verified webhook events, updating or creating user records in the database.
HTTP Route: Defines an endpoint /clerk-user-webhook to handle these events.
This setup ensures that the application can securely handle user-related events from Clerk, keeping the user data in sync with the application's database. */